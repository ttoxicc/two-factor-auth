import sqlite3
import nest_asyncio
nest_asyncio.apply()

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from database import save_user
import asyncio

BOT_TOKEN = ''

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    context.user_data['state'] = 'WAIT_LOGIN'

async def handle_message(update: Update, context: CallbackContext):
    state = context.user_data.get('state')
    
    if state == 'WAIT_LOGIN':
        context.user_data['login'] = update.message.text
        await update.message.reply_text("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        context.user_data['state'] = 'WAIT_PASSWORD'
    
    elif state == 'WAIT_PASSWORD':
        try:
            save_user(
                context.user_data['login'],
                update.message.text,
                update.message.chat_id
            )
            await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç.")
        except sqlite3.IntegrityError:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        finally:
            context.user_data.clear()

async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
